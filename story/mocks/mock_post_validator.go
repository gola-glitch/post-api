// Code generated by MockGen. DO NOT EDIT.
// Source: post_validator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	golaerror "github.com/inclusi-blog/gola-utils/golaerror"
	gomock "github.com/golang/mock/gomock"
	models "post-api/story/models"
	db "post-api/story/models/db"
	reflect "reflect"
)

// MockPostValidator is a mock of PostValidator interface
type MockPostValidator struct {
	ctrl     *gomock.Controller
	recorder *MockPostValidatorMockRecorder
}

// MockPostValidatorMockRecorder is the mock recorder for MockPostValidator
type MockPostValidatorMockRecorder struct {
	mock *MockPostValidator
}

// NewMockPostValidator creates a new mock instance
func NewMockPostValidator(ctrl *gomock.Controller) *MockPostValidator {
	mock := &MockPostValidator{ctrl: ctrl}
	mock.recorder = &MockPostValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostValidator) EXPECT() *MockPostValidatorMockRecorder {
	return m.recorder
}

// ValidateAndGetReadTime mocks base method
func (m *MockPostValidator) ValidateAndGetReadTime(draft db.Draft, ctx context.Context) (models.MetaData, *golaerror.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAndGetReadTime", draft, ctx)
	ret0, _ := ret[0].(models.MetaData)
	ret1, _ := ret[1].(*golaerror.Error)
	return ret0, ret1
}

// ValidateAndGetReadTime indicates an expected call of ValidateAndGetReadTime
func (mr *MockPostValidatorMockRecorder) ValidateAndGetReadTime(draft, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAndGetReadTime", reflect.TypeOf((*MockPostValidator)(nil).ValidateAndGetReadTime), draft, ctx)
}
