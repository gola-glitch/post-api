// Code generated by MockGen. DO NOT EDIT.
// Source: repository/user_details_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	db "post-api/idp/models/db"
	reflect "reflect"
)

// MockUserDetailsRepository is a mock of UserDetailsRepository interface
type MockUserDetailsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserDetailsRepositoryMockRecorder
}

// MockUserDetailsRepositoryMockRecorder is the mock recorder for MockUserDetailsRepository
type MockUserDetailsRepositoryMockRecorder struct {
	mock *MockUserDetailsRepository
}

// NewMockUserDetailsRepository creates a new mock instance
func NewMockUserDetailsRepository(ctrl *gomock.Controller) *MockUserDetailsRepository {
	mock := &MockUserDetailsRepository{ctrl: ctrl}
	mock.recorder = &MockUserDetailsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserDetailsRepository) EXPECT() *MockUserDetailsRepositoryMockRecorder {
	return m.recorder
}

// SaveUserDetails mocks base method
func (m *MockUserDetailsRepository) SaveUserDetails(details db.SaveUserDetails, context context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserDetails", details, context)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserDetails indicates an expected call of SaveUserDetails
func (mr *MockUserDetailsRepositoryMockRecorder) SaveUserDetails(details, context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserDetails", reflect.TypeOf((*MockUserDetailsRepository)(nil).SaveUserDetails), details, context)
}

// IsEmailAvailable mocks base method
func (m *MockUserDetailsRepository) IsEmailAvailable(email string, ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailAvailable", email, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmailAvailable indicates an expected call of IsEmailAvailable
func (mr *MockUserDetailsRepositoryMockRecorder) IsEmailAvailable(email, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailAvailable", reflect.TypeOf((*MockUserDetailsRepository)(nil).IsEmailAvailable), email, ctx)
}

// IsUserNameAvailable mocks base method
func (m *MockUserDetailsRepository) IsUserNameAvailable(username string, ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserNameAvailable", username, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserNameAvailable indicates an expected call of IsUserNameAvailable
func (mr *MockUserDetailsRepositoryMockRecorder) IsUserNameAvailable(username, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserNameAvailable", reflect.TypeOf((*MockUserDetailsRepository)(nil).IsUserNameAvailable), username, ctx)
}

// IsUserNameAndEmailAvailable mocks base method
func (m *MockUserDetailsRepository) IsUserNameAndEmailAvailable(username, email string, ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserNameAndEmailAvailable", username, email, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserNameAndEmailAvailable indicates an expected call of IsUserNameAndEmailAvailable
func (mr *MockUserDetailsRepositoryMockRecorder) IsUserNameAndEmailAvailable(username, email, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserNameAndEmailAvailable", reflect.TypeOf((*MockUserDetailsRepository)(nil).IsUserNameAndEmailAvailable), username, email, ctx)
}

// GetUserProfile mocks base method
func (m *MockUserDetailsRepository) GetUserProfile(email string, ctx context.Context) (db.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", email, ctx)
	ret0, _ := ret[0].(db.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile
func (mr *MockUserDetailsRepositoryMockRecorder) GetUserProfile(email, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockUserDetailsRepository)(nil).GetUserProfile), email, ctx)
}

// GetPassword mocks base method
func (m *MockUserDetailsRepository) GetPassword(email string, ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword", email, ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassword indicates an expected call of GetPassword
func (mr *MockUserDetailsRepositoryMockRecorder) GetPassword(email, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockUserDetailsRepository)(nil).GetPassword), email, ctx)
}
