// Code generated by MockGen. DO NOT EDIT.
// Source: service/login_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	golaerror "github.com/inclusi-blog/gola-utils/golaerror"
	request "post-api/idp/models/request"
	reflect "reflect"
)

// MockLoginService is a mock of LoginService interface
type MockLoginService struct {
	ctrl     *gomock.Controller
	recorder *MockLoginServiceMockRecorder
}

// MockLoginServiceMockRecorder is the mock recorder for MockLoginService
type MockLoginServiceMockRecorder struct {
	mock *MockLoginService
}

// NewMockLoginService creates a new mock instance
func NewMockLoginService(ctrl *gomock.Controller) *MockLoginService {
	mock := &MockLoginService{ctrl: ctrl}
	mock.recorder = &MockLoginServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoginService) EXPECT() *MockLoginServiceMockRecorder {
	return m.recorder
}

// LoginWithEmailAndPassword mocks base method
func (m *MockLoginService) LoginWithEmailAndPassword(request request.UserLoginRequest, ctx *gin.Context) (interface{}, *golaerror.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginWithEmailAndPassword", request, ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*golaerror.Error)
	return ret0, ret1
}

// LoginWithEmailAndPassword indicates an expected call of LoginWithEmailAndPassword
func (mr *MockLoginServiceMockRecorder) LoginWithEmailAndPassword(request, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithEmailAndPassword", reflect.TypeOf((*MockLoginService)(nil).LoginWithEmailAndPassword), request, ctx)
}
