// Code generated by MockGen. DO NOT EDIT.
// Source: service/activation_link_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	golaerror "github.com/gola-glitch/gola-utils/golaerror"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockActivationLinkService is a mock of ActivationLinkService interface
type MockActivationLinkService struct {
	ctrl     *gomock.Controller
	recorder *MockActivationLinkServiceMockRecorder
}

// MockActivationLinkServiceMockRecorder is the mock recorder for MockActivationLinkService
type MockActivationLinkServiceMockRecorder struct {
	mock *MockActivationLinkService
}

// NewMockActivationLinkService creates a new mock instance
func NewMockActivationLinkService(ctrl *gomock.Controller) *MockActivationLinkService {
	mock := &MockActivationLinkService{ctrl: ctrl}
	mock.recorder = &MockActivationLinkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActivationLinkService) EXPECT() *MockActivationLinkServiceMockRecorder {
	return m.recorder
}

// SaveHashAndSendEmail mocks base method
func (m *MockActivationLinkService) SaveHashAndSendEmail(generatedUUID string, ctx context.Context) *golaerror.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHashAndSendEmail", generatedUUID, ctx)
	ret0, _ := ret[0].(*golaerror.Error)
	return ret0
}

// SaveHashAndSendEmail indicates an expected call of SaveHashAndSendEmail
func (mr *MockActivationLinkServiceMockRecorder) SaveHashAndSendEmail(generatedUUID, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHashAndSendEmail", reflect.TypeOf((*MockActivationLinkService)(nil).SaveHashAndSendEmail), generatedUUID, ctx)
}

// GetUUIDFromHash mocks base method
func (m *MockActivationLinkService) GetUUIDFromHash(activationHash string, ctx context.Context) (string, *golaerror.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUUIDFromHash", activationHash, ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*golaerror.Error)
	return ret0, ret1
}

// GetUUIDFromHash indicates an expected call of GetUUIDFromHash
func (mr *MockActivationLinkServiceMockRecorder) GetUUIDFromHash(activationHash, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUIDFromHash", reflect.TypeOf((*MockActivationLinkService)(nil).GetUUIDFromHash), activationHash, ctx)
}
