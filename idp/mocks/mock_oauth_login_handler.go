// Code generated by MockGen. DO NOT EDIT.
// Source: handlers/login/oauth_login_handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gin "github.com/gin-gonic/gin"
	golaerror "github.com/inclusi-blog/gola-utils/golaerror"
	model "github.com/inclusi-blog/gola-utils/model"
	gomock "github.com/golang/mock/gomock"
	db "post-api/idp/models/db"
	oauth "post-api/idp/models/oauth"
	response "post-api/idp/models/response"
	reflect "reflect"
)

// MockOauthLoginHandler is a mock of OauthLoginHandler interface
type MockOauthLoginHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOauthLoginHandlerMockRecorder
}

// MockOauthLoginHandlerMockRecorder is the mock recorder for MockOauthLoginHandler
type MockOauthLoginHandlerMockRecorder struct {
	mock *MockOauthLoginHandler
}

// NewMockOauthLoginHandler creates a new mock instance
func NewMockOauthLoginHandler(ctrl *gomock.Controller) *MockOauthLoginHandler {
	mock := &MockOauthLoginHandler{ctrl: ctrl}
	mock.recorder = &MockOauthLoginHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOauthLoginHandler) EXPECT() *MockOauthLoginHandlerMockRecorder {
	return m.recorder
}

// AcceptLogin mocks base method
func (m *MockOauthLoginHandler) AcceptLogin(ctx *gin.Context, loginChallenge string, profile db.UserProfile) (response.AcceptResponse, *golaerror.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptLogin", ctx, loginChallenge, profile)
	ret0, _ := ret[0].(response.AcceptResponse)
	ret1, _ := ret[1].(*golaerror.Error)
	return ret0, ret1
}

// AcceptLogin indicates an expected call of AcceptLogin
func (mr *MockOauthLoginHandlerMockRecorder) AcceptLogin(ctx, loginChallenge, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptLogin", reflect.TypeOf((*MockOauthLoginHandler)(nil).AcceptLogin), ctx, loginChallenge, profile)
}

// AcceptConsentRequest mocks base method
func (m *MockOauthLoginHandler) AcceptConsentRequest(ctx *gin.Context, consentChallenge string) (interface{}, *golaerror.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptConsentRequest", ctx, consentChallenge)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*golaerror.Error)
	return ret0, ret1
}

// AcceptConsentRequest indicates an expected call of AcceptConsentRequest
func (mr *MockOauthLoginHandlerMockRecorder) AcceptConsentRequest(ctx, consentChallenge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptConsentRequest", reflect.TypeOf((*MockOauthLoginHandler)(nil).AcceptConsentRequest), ctx, consentChallenge)
}

// ExchangeToken mocks base method
func (m *MockOauthLoginHandler) ExchangeToken(ctx *gin.Context, exchangeRequest oauth.TokenExchangeRequest) (response.TokenExchangeResponse, model.IdToken, *golaerror.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeToken", ctx, exchangeRequest)
	ret0, _ := ret[0].(response.TokenExchangeResponse)
	ret1, _ := ret[1].(model.IdToken)
	ret2, _ := ret[2].(*golaerror.Error)
	return ret0, ret1, ret2
}

// ExchangeToken indicates an expected call of ExchangeToken
func (mr *MockOauthLoginHandlerMockRecorder) ExchangeToken(ctx, exchangeRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeToken", reflect.TypeOf((*MockOauthLoginHandler)(nil).ExchangeToken), ctx, exchangeRequest)
}
