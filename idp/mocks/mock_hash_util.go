// Code generated by MockGen. DO NOT EDIT.
// Source: utils/hash_util.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHashUtil is a mock of HashUtil interface
type MockHashUtil struct {
	ctrl     *gomock.Controller
	recorder *MockHashUtilMockRecorder
}

// MockHashUtilMockRecorder is the mock recorder for MockHashUtil
type MockHashUtilMockRecorder struct {
	mock *MockHashUtil
}

// NewMockHashUtil creates a new mock instance
func NewMockHashUtil(ctrl *gomock.Controller) *MockHashUtil {
	mock := &MockHashUtil{ctrl: ctrl}
	mock.recorder = &MockHashUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHashUtil) EXPECT() *MockHashUtilMockRecorder {
	return m.recorder
}

// GenerateBcryptHash mocks base method
func (m *MockHashUtil) GenerateBcryptHash(text string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateBcryptHash", text)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateBcryptHash indicates an expected call of GenerateBcryptHash
func (mr *MockHashUtilMockRecorder) GenerateBcryptHash(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateBcryptHash", reflect.TypeOf((*MockHashUtil)(nil).GenerateBcryptHash), text)
}

// MatchBcryptHash mocks base method
func (m *MockHashUtil) MatchBcryptHash(hashedText, plainText string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchBcryptHash", hashedText, plainText)
	ret0, _ := ret[0].(error)
	return ret0
}

// MatchBcryptHash indicates an expected call of MatchBcryptHash
func (mr *MockHashUtilMockRecorder) MatchBcryptHash(hashedText, plainText interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchBcryptHash", reflect.TypeOf((*MockHashUtil)(nil).MatchBcryptHash), hashedText, plainText)
}
