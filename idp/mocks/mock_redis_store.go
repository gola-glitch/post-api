// Code generated by MockGen. DO NOT EDIT.
// Source: redis_util/redis_store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRedisStore is a mock of RedisStore interface
type MockRedisStore struct {
	ctrl     *gomock.Controller
	recorder *MockRedisStoreMockRecorder
}

// MockRedisStoreMockRecorder is the mock recorder for MockRedisStore
type MockRedisStoreMockRecorder struct {
	mock *MockRedisStore
}

// NewMockRedisStore creates a new mock instance
func NewMockRedisStore(ctrl *gomock.Controller) *MockRedisStore {
	mock := &MockRedisStore{ctrl: ctrl}
	mock.recorder = &MockRedisStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRedisStore) EXPECT() *MockRedisStoreMockRecorder {
	return m.recorder
}

// Set mocks base method
func (m *MockRedisStore) Set(ctx context.Context, key string, value interface{}, expiryInMinutes int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiryInMinutes)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockRedisStoreMockRecorder) Set(ctx, key, value, expiryInMinutes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisStore)(nil).Set), ctx, key, value, expiryInMinutes)
}

// SetInSeconds mocks base method
func (m *MockRedisStore) SetInSeconds(ctx context.Context, key string, value interface{}, expiryInSeconds int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInSeconds", ctx, key, value, expiryInSeconds)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInSeconds indicates an expected call of SetInSeconds
func (mr *MockRedisStoreMockRecorder) SetInSeconds(ctx, key, value, expiryInSeconds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInSeconds", reflect.TypeOf((*MockRedisStore)(nil).SetInSeconds), ctx, key, value, expiryInSeconds)
}

// SetNX mocks base method
func (m *MockRedisStore) SetNX(ctx context.Context, key string, value interface{}, expiryInMinutes int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNX", ctx, key, value, expiryInMinutes)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNX indicates an expected call of SetNX
func (mr *MockRedisStoreMockRecorder) SetNX(ctx, key, value, expiryInMinutes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNX", reflect.TypeOf((*MockRedisStore)(nil).SetNX), ctx, key, value, expiryInMinutes)
}

// Get mocks base method
func (m *MockRedisStore) Get(ctx context.Context, key string, dest interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockRedisStoreMockRecorder) Get(ctx, key, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisStore)(nil).Get), ctx, key, dest)
}

// Delete mocks base method
func (m *MockRedisStore) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRedisStoreMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRedisStore)(nil).Delete), ctx, key)
}

// DeleteAll mocks base method
func (m *MockRedisStore) DeleteAll(ctx context.Context, pattern string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll
func (mr *MockRedisStoreMockRecorder) DeleteAll(ctx, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockRedisStore)(nil).DeleteAll), ctx, pattern)
}
