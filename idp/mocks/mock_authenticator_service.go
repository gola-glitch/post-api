// Code generated by MockGen. DO NOT EDIT.
// Source: service/authenticator_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gin "github.com/gin-gonic/gin"
	golaerror "github.com/gola-glitch/gola-utils/golaerror"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAuthenticatorService is a mock of AuthenticatorService interface
type MockAuthenticatorService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorServiceMockRecorder
}

// MockAuthenticatorServiceMockRecorder is the mock recorder for MockAuthenticatorService
type MockAuthenticatorServiceMockRecorder struct {
	mock *MockAuthenticatorService
}

// NewMockAuthenticatorService creates a new mock instance
func NewMockAuthenticatorService(ctrl *gomock.Controller) *MockAuthenticatorService {
	mock := &MockAuthenticatorService{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthenticatorService) EXPECT() *MockAuthenticatorServiceMockRecorder {
	return m.recorder
}

// Authenticate mocks base method
func (m *MockAuthenticatorService) Authenticate(ctx *gin.Context, planTextPassword, email string) *golaerror.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, planTextPassword, email)
	ret0, _ := ret[0].(*golaerror.Error)
	return ret0
}

// Authenticate indicates an expected call of Authenticate
func (mr *MockAuthenticatorServiceMockRecorder) Authenticate(ctx, planTextPassword, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticatorService)(nil).Authenticate), ctx, planTextPassword, email)
}
