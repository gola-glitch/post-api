// Code generated by MockGen. DO NOT EDIT.
// Source: service/user_registration_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gin "github.com/gin-gonic/gin"
	golaerror "github.com/inclusi-blog/gola-utils/golaerror"
	gomock "github.com/golang/mock/gomock"
	request "post-api/idp/models/request"
	response "post-api/idp/models/response"
	reflect "reflect"
)

// MockUserRegistrationService is a mock of UserRegistrationService interface
type MockUserRegistrationService struct {
	ctrl     *gomock.Controller
	recorder *MockUserRegistrationServiceMockRecorder
}

// MockUserRegistrationServiceMockRecorder is the mock recorder for MockUserRegistrationService
type MockUserRegistrationServiceMockRecorder struct {
	mock *MockUserRegistrationService
}

// NewMockUserRegistrationService creates a new mock instance
func NewMockUserRegistrationService(ctrl *gomock.Controller) *MockUserRegistrationService {
	mock := &MockUserRegistrationService{ctrl: ctrl}
	mock.recorder = &MockUserRegistrationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRegistrationService) EXPECT() *MockUserRegistrationServiceMockRecorder {
	return m.recorder
}

// InitiateRegistration mocks base method
func (m *MockUserRegistrationService) InitiateRegistration(request request.InitiateRegistrationRequest, ctx *gin.Context) *golaerror.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateRegistration", request, ctx)
	ret0, _ := ret[0].(*golaerror.Error)
	return ret0
}

// InitiateRegistration indicates an expected call of InitiateRegistration
func (mr *MockUserRegistrationServiceMockRecorder) InitiateRegistration(request, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateRegistration", reflect.TypeOf((*MockUserRegistrationService)(nil).InitiateRegistration), request, ctx)
}

// IsEmailRegistered mocks base method
func (m *MockUserRegistrationService) IsEmailRegistered(availabilityRequest request.EmailAvailabilityRequest, ctx *gin.Context) (response.EmailAvailabilityResponse, *golaerror.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailRegistered", availabilityRequest, ctx)
	ret0, _ := ret[0].(response.EmailAvailabilityResponse)
	ret1, _ := ret[1].(*golaerror.Error)
	return ret0, ret1
}

// IsEmailRegistered indicates an expected call of IsEmailRegistered
func (mr *MockUserRegistrationServiceMockRecorder) IsEmailRegistered(availabilityRequest, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailRegistered", reflect.TypeOf((*MockUserRegistrationService)(nil).IsEmailRegistered), availabilityRequest, ctx)
}

// IsUsernameRegistered mocks base method
func (m *MockUserRegistrationService) IsUsernameRegistered(availabilityRequest request.UsernameAvailabilityRequest, ctx *gin.Context) (response.UsernameAvailabilityResponse, *golaerror.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUsernameRegistered", availabilityRequest, ctx)
	ret0, _ := ret[0].(response.UsernameAvailabilityResponse)
	ret1, _ := ret[1].(*golaerror.Error)
	return ret0, ret1
}

// IsUsernameRegistered indicates an expected call of IsUsernameRegistered
func (mr *MockUserRegistrationServiceMockRecorder) IsUsernameRegistered(availabilityRequest, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUsernameRegistered", reflect.TypeOf((*MockUserRegistrationService)(nil).IsUsernameRegistered), availabilityRequest, ctx)
}
