// Code generated by MockGen. DO NOT EDIT.
// Source: abstract_post_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	helper "post-api/helper"
	db "post-api/models/db"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAbstractPostRepository is a mock of AbstractPostRepository interface.
type MockAbstractPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAbstractPostRepositoryMockRecorder
}

// MockAbstractPostRepositoryMockRecorder is the mock recorder for MockAbstractPostRepository.
type MockAbstractPostRepositoryMockRecorder struct {
	mock *MockAbstractPostRepository
}

// NewMockAbstractPostRepository creates a new mock instance.
func NewMockAbstractPostRepository(ctrl *gomock.Controller) *MockAbstractPostRepository {
	mock := &MockAbstractPostRepository{ctrl: ctrl}
	mock.recorder = &MockAbstractPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbstractPostRepository) EXPECT() *MockAbstractPostRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockAbstractPostRepository) Save(ctx context.Context, txn helper.Transaction, post db.AbstractPost) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, txn, post)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockAbstractPostRepositoryMockRecorder) Save(ctx, txn, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAbstractPostRepository)(nil).Save), ctx, txn, post)
}
