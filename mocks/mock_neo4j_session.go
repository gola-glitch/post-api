// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/hariharans/IdeaProjects/post-api/vendor/github.com/neo4j/neo4j-go-driver/neo4j/session.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	"github.com/neo4j/neo4j-go-driver/neo4j"
	reflect "reflect"
)

// MockSession is a mock of Session interface
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// LastBookmark mocks base method
func (m *MockSession) LastBookmark() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastBookmark")
	ret0, _ := ret[0].(string)
	return ret0
}

// LastBookmark indicates an expected call of LastBookmark
func (mr *MockSessionMockRecorder) LastBookmark() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastBookmark", reflect.TypeOf((*MockSession)(nil).LastBookmark))
}

// BeginTransaction mocks base method
func (m *MockSession) BeginTransaction(configurers ...func(*neo4j.TransactionConfig)) (neo4j.Transaction, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range configurers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BeginTransaction", varargs...)
	ret0, _ := ret[0].(neo4j.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction
func (mr *MockSessionMockRecorder) BeginTransaction(configurers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockSession)(nil).BeginTransaction), configurers...)
}

// ReadTransaction mocks base method
func (m *MockSession) ReadTransaction(work neo4j.TransactionWork, configurers ...func(*neo4j.TransactionConfig)) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{work}
	for _, a := range configurers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadTransaction", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTransaction indicates an expected call of ReadTransaction
func (mr *MockSessionMockRecorder) ReadTransaction(work interface{}, configurers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{work}, configurers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTransaction", reflect.TypeOf((*MockSession)(nil).ReadTransaction), varargs...)
}

// WriteTransaction mocks base method
func (m *MockSession) WriteTransaction(work neo4j.TransactionWork, configurers ...func(*neo4j.TransactionConfig)) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{work}
	for _, a := range configurers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteTransaction", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTransaction indicates an expected call of WriteTransaction
func (mr *MockSessionMockRecorder) WriteTransaction(work interface{}, configurers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{work}, configurers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTransaction", reflect.TypeOf((*MockSession)(nil).WriteTransaction), varargs...)
}

// Run mocks base method
func (m *MockSession) Run(cypher string, params map[string]interface{}, configurers ...func(*neo4j.TransactionConfig)) (neo4j.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{cypher, params}
	for _, a := range configurers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(neo4j.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockSessionMockRecorder) Run(cypher, params interface{}, configurers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{cypher, params}, configurers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockSession)(nil).Run), varargs...)
}

// Close mocks base method
func (m *MockSession) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSession)(nil).Close))
}

// MocksessionPool is a mock of sessionPool interface
type MocksessionPool struct {
	ctrl     *gomock.Controller
	recorder *MocksessionPoolMockRecorder
}

// MocksessionPoolMockRecorder is the mock recorder for MocksessionPool
type MocksessionPoolMockRecorder struct {
	mock *MocksessionPool
}

// NewMocksessionPool creates a new mock instance
func NewMocksessionPool(ctrl *gomock.Controller) *MocksessionPool {
	mock := &MocksessionPool{ctrl: ctrl}
	mock.recorder = &MocksessionPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksessionPool) EXPECT() *MocksessionPoolMockRecorder {
	return m.recorder
}

// Borrow mocks base method
func (m *MocksessionPool) Borrow(ctx context.Context, serverNames []string, wait bool) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Borrow", ctx, serverNames, wait)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Borrow indicates an expected call of Borrow
func (mr *MocksessionPoolMockRecorder) Borrow(ctx, serverNames, wait interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Borrow", reflect.TypeOf((*MocksessionPool)(nil).Borrow), ctx, serverNames, wait)
}

// Return mocks base method
func (m *MocksessionPool) Return(c interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Return", c)
}

// Return indicates an expected call of Return
func (mr *MocksessionPoolMockRecorder) Return(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Return", reflect.TypeOf((*MocksessionPool)(nil).Return), c)
}

// CleanUp mocks base method
func (m *MocksessionPool) CleanUp() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanUp")
}

// CleanUp indicates an expected call of CleanUp
func (mr *MocksessionPoolMockRecorder) CleanUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUp", reflect.TypeOf((*MocksessionPool)(nil).CleanUp))
}
